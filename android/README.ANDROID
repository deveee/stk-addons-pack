================================================================================

 SuperTuxKart Add-ons Pack

================================================================================



--------------------------------------------------------------------------------
 SYSTEM REQUIREMENTS
--------------------------------------------------------------------------------

...

--------------------------------------------------------------------------------
 COMPILATION
--------------------------------------------------------------------------------

The build scripts are designed to run under linux. They may work under cygwin
after some tweaks, but atm. only linux is supported.

Dependencies list (may be incomplete):

    autoconf, automake, make, python, gradle, ant, imagemagick, cmake, 
    vorbis-tools

Additionally some dependencies for optimize_data script:

    advancecomp, libjpeg-progs, optipng

You need Android SDK for android-19 platform (the API for Android 4.4) and
Android NDK. Note that NDK >= r15b is atm. not supported. Version r12b is
strongly recommended, because it's known that it works without issues.

You need to create proper "android-sdk" and "android-ndk" symlinks in the
directory with Android project, so that the compilation script will have access
to the SDK and NDK. These paths can be also set in SDK_PATH and NDK_PATH 
environmental variables.

Before running the compilation, run the generate_assets script, so that
selected assets will be copied to "assets" directory, and then included in the
apk file.

If the assets directory is already prepared, you can run "./make.sh" command to
build the project and create an apk file. Note that all arguments are passed to
the make command, so that you can run "./make.sh -j5" for multi-threaded build.

If you want to prepare a package for particular architecture, you can choose it
by setting the COMPILE_ARCH environmental variable. At this stage, supported
architectures are "armv7", "x86" and "aarch64". The default is "armv7".

You can choose build type by setting BUILD_TYPE environment variable to "debug"
or "release". The default is debug build. Note that if you choose release build,
you have to manually sign the apk with your key and run zipalign.

Additionally you can choose the build tool by setting BUILD_TOOL environment
variable to "gradle" or "ant". Note that ant has been already removed from
Android SDK, so you have to use SDK <= 25.2.5 for building with ant. By default 
the BUILD_TOOL is set to "gradle".

You can override the SDK build-tools version by setting the BUILD_TOOLS_VER
environment variable.

Basically if all dependencies are installed in the system, it should be enough
to just run:

    export SDK_PATH=/path/to/your/android/sdk
    export NDK_PATH=/path/to/your/android/ndk
    ./generate_assets.sh
    ./make.sh -j5



--------------------------------------------------------------------------------
 RELEASE BUILD
--------------------------------------------------------------------------------

Making a release build is similar to typical compilation, but there are few
additional things to do. 

Before compilation you have to set:

    export BUILD_TYPE=release

and then you make standard compilation with:

    ./generate_assets.sh
    ./make.sh -j5
    

The compiled apk is unsigned, so you have to sign it with your key. To sign it,
you have to run:

    jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore \
        my-release-key.keystore android-release-unsigned.apk alias_name
        
and then:

    zipalign -v 4 android-release-unsigned.apk android-release.apk



--------------------------------------------------------------------------------
 KNOWN ISSUES
--------------------------------------------------------------------------------

...
